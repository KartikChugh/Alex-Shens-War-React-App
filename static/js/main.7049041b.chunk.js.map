{"version":3,"sources":["CardList.js","App.js","serviceWorker.js","index.js"],"names":["cardValues","CardList","title","cards","activeCards","map","card","Card","value","suit","length","App","props","playRound","state","playerHand","player","opp","opponentHand","index","console","log","setState","gameRunning","winner","playerWonRound","playerDiscard","splice","oppDiscard","activePlayerCards","activeOppCards","concat","wonStatus","playGame","i","dealHands","deck","suits","push","parseInt","startingPlayerHand","startingOppHand","Math","floor","random","className","this","id","Button","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7049041b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Card from \"react-bootstrap/Card\"\r\n\r\nconst cardValues = [2,3,4,5,6,7,8,9,10,\"Jack\",\"Queen\",\"King\",\"Ace\"]\r\nconst CardList = ({title, cards, activeCards}) => {\r\n    return <div>\r\n        <h1>{title}</h1>\r\n        {activeCards.map(card => {\r\n            return <Card>{cardValues[card.value]} of {card.suit}</Card>\r\n        })}\r\n        <h2>Total cards: {cards.length}</h2>\r\n    </div>\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css'; // not sure if this does much\nimport Button from \"react-bootstrap/Button\"\nimport CardList from \"./CardList\"\nimport './App.css';\n// import Card from \"react-bootstrap/Card\"\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerHand: [],\n      opponentHand: [],\n      activePlayerCards: [],\n      activeOppCards: [],\n      wonStatus: null,\n      gameRunning: false,\n      winner: null\n    }\n  }\n\n  playRound = () => {\n    if (this.state.playerHand[0] != null) {\n      let player = this.state.playerHand\n      let opp = this.state.opponentHand\n\n      let index = 0;\n      while (player[index].value === opp[index].value) {\n        index += 4;\n        console.log(index)\n        if (player.length <= index) { // if a player can't draw 4 for war, they instantly lose\n          this.setState({ gameRunning: false, winner: \"opponent\" })\n          break;\n        }\n        if (opp.length <= index) {\n          this.setState({ gameRunning: false, winner: \"player\" })\n          break;\n        }\n      }\n\n      if (this.state.gameRunning) { // does state even update fast enough for this to work?\n        let playerWonRound = player[index].value > opp[index].value;\n        let playerDiscard = player.splice(0, index + 1);\n        let oppDiscard = opp.splice(0, index + 1);\n\n        this.setState({\n          activePlayerCards: playerDiscard,\n          activeOppCards: oppDiscard\n        })\n\n        if (playerWonRound) {\n          player = player.concat(playerDiscard, oppDiscard)\n          this.setState({ wonStatus: \"You won the round!\" })\n        }\n        else {\n          opp = opp.concat(playerDiscard, oppDiscard)\n          this.setState({ wonStatus: \"You lost the round!\" })\n        }\n\n        this.setState({\n          playerHand: player,\n          opponentHand: opp\n        })\n      }\n    }\n    else {\n      console.log(\"Can't play a round with no cards\")\n    }\n  }\n\n  playGame = () => { // this breaks state for some reason? i suspect it's because the state updates too slowly\n    if (this.state.playerHand[0] != null) {\n      let i=0;\n      while (this.state.playerHand.length !== 0 && this.state.opponentHand !== 0) {\n        this.playRound();\n\n        if(this.state.playerHand.length + this.state.opponentHand.length !== 52){\n          i++;\n          console.log(\"On iteration \" + i);          \n          console.log(this.state.playerHand.length)\n          console.log(this.state.opponentHand.length)          \n          console.log(this.state.playerHand)\n          console.log(this.state.opponentHand)\n          \n        }\n      }\n      console.log(this.state.playerHand.length === 0 ? \"You lost!\" : \"You won!\")\n    }\n    else {\n      console.log(\"Can't play a game with no cards\")\n    }\n\n  }\n  dealHands = () => {\n    let deck = [];\n    let suits = [\"hearts\", \"diamonds\", \"spades\", \"clubs\"]\n    for (let card = 0; card < 13; card++) { // 11-14 are J/Q/K/A respectively\n      for (let i = 0; i < 4; i++) {\n        deck.push({ suit: suits[i], value: parseInt(card) });\n      }\n    }\n\n    let startingPlayerHand = [], startingOppHand = [];\n    for (let i = 0; i < 52; i++) {\n      let index = Math.floor(Math.random() * deck.length);\n      if (i % 2 === 0) {\n        startingPlayerHand.push(deck[index]);\n      }\n      else {\n        startingOppHand.push(deck[index]);\n      }\n      // console.log(index);\n      // console.log(Math.random)\n\n      deck.splice(index, 1);\n    }\n    console.log(startingPlayerHand);\n    console.log(startingOppHand);\n    this.setState({\n      playerHand: startingPlayerHand,\n      opponentHand: startingOppHand,\n      gameRunning: true\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">War</h1>\n        <div className=\"game\">\n          {/* <div id=\"game\"> */}\n          <CardList title=\"Your cards\" cards={this.state.playerHand} activeCards={this.state.activePlayerCards} />\n          <p className=\"roundStatus\">{this.state.wonStatus != null ? this.state.wonStatus : \"\"}</p>\n          <CardList title=\"Opponent's cards\" cards={this.state.opponentHand} activeCards={this.state.activeOppCards} />\n          {/* </div> */}\n        </div>\n        <div id=\"buttons\">\n          {/* {!this.state.gameRunning ?\n          <Button onClick={this.dealHands}>Start</Button> :\n          <Button onClick={this.playRound}>Play round</Button>} */}\n\n          <Button onClick={this.dealHands}>Start</Button> \n          <Button onClick={this.playRound}>Play round</Button>\n          <Button onClick={this.playGame}>Play entire game</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}